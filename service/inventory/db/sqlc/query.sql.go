// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const getBrandById = `-- name: GetBrandById :one
SELECT id, company_id, name FROM inventory.brands
WHERE id = $1
`

type GetBrandByIdRow struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) GetBrandById(ctx context.Context, id string) (GetBrandByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getBrandById, id)
	var i GetBrandByIdRow
	err := row.Scan(&i.ID, &i.CompanyID, &i.Name)
	return i, err
}

const getBrands = `-- name: GetBrands :many
SELECT id, company_id, name FROM inventory.brands
WHERE company_id = $1 AND name LIKE $2
`

type GetBrandsParams struct {
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

type GetBrandsRow struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) GetBrands(ctx context.Context, arg GetBrandsParams) ([]GetBrandsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBrands, arg.CompanyID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBrandsRow
	for rows.Next() {
		var i GetBrandsRow
		if err := rows.Scan(&i.ID, &i.CompanyID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupById = `-- name: GetGroupById :one
SELECT id, company_id, name FROM inventory.groups
WHERE id = $1
`

type GetGroupByIdRow struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) GetGroupById(ctx context.Context, id string) (GetGroupByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getGroupById, id)
	var i GetGroupByIdRow
	err := row.Scan(&i.ID, &i.CompanyID, &i.Name)
	return i, err
}

const getGroups = `-- name: GetGroups :many
SELECT id, company_id, name FROM inventory.groups
WHERE company_id = $1 AND name LIKE $2
`

type GetGroupsParams struct {
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

type GetGroupsRow struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) GetGroups(ctx context.Context, arg GetGroupsParams) ([]GetGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroups, arg.CompanyID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupsRow
	for rows.Next() {
		var i GetGroupsRow
		if err := rows.Scan(&i.ID, &i.CompanyID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnits = `-- name: GetUnits :many
SELECT id, company_id, name FROM inventory.units
WHERE company_id = $1 AND name LIKE $2
`

type GetUnitsParams struct {
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

type GetUnitsRow struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) GetUnits(ctx context.Context, arg GetUnitsParams) ([]GetUnitsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnits, arg.CompanyID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnitsRow
	for rows.Next() {
		var i GetUnitsRow
		if err := rows.Scan(&i.ID, &i.CompanyID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBrand = `-- name: InsertBrand :one
INSERT INTO inventory.brands(id, company_id, name)
VALUES ($1, $2, $3)
RETURNING id, company_id, name, created_at, updated_at
`

type InsertBrandParams struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) InsertBrand(ctx context.Context, arg InsertBrandParams) (InventoryBrand, error) {
	row := q.db.QueryRowContext(ctx, insertBrand, arg.ID, arg.CompanyID, arg.Name)
	var i InventoryBrand
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertGroup = `-- name: InsertGroup :one
INSERT INTO inventory.groups(id, company_id, name)
VALUES ($1, $2, $3)
RETURNING id, company_id, name, created_at, updated_at
`

type InsertGroupParams struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) InsertGroup(ctx context.Context, arg InsertGroupParams) (InventoryGroup, error) {
	row := q.db.QueryRowContext(ctx, insertGroup, arg.ID, arg.CompanyID, arg.Name)
	var i InventoryGroup
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertItem = `-- name: InsertItem :one
INSERT INTO inventory.items(id, company_id, image_url,
code, name, brand_id, group_id, tag, description)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, company_id, image_url, code, name, brand_id, group_id, tag, description, created_at, updated_at
`

type InsertItemParams struct {
	ID          string `db:"id"`
	CompanyID   string `db:"company_id"`
	ImageUrl    string `db:"image_url"`
	Code        string `db:"code"`
	Name        string `db:"name"`
	BrandID     string `db:"brand_id"`
	GroupID     string `db:"group_id"`
	Tag         string `db:"tag"`
	Description string `db:"description"`
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (InventoryItem, error) {
	row := q.db.QueryRowContext(ctx, insertItem,
		arg.ID,
		arg.CompanyID,
		arg.ImageUrl,
		arg.Code,
		arg.Name,
		arg.BrandID,
		arg.GroupID,
		arg.Tag,
		arg.Description,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ImageUrl,
		&i.Code,
		&i.Name,
		&i.BrandID,
		&i.GroupID,
		&i.Tag,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertItemVariant = `-- name: InsertItemVariant :one
INSERT INTO inventory.item_variants(id, item_id, image_url,
name, price, stock, is_default)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, item_id, image_url, name, price, stock, is_default, created_at, updated_at
`

type InsertItemVariantParams struct {
	ID        string `db:"id"`
	ItemID    string `db:"item_id"`
	ImageUrl  string `db:"image_url"`
	Name      string `db:"name"`
	Price     int64  `db:"price"`
	Stock     int64  `db:"stock"`
	IsDefault bool   `db:"is_default"`
}

func (q *Queries) InsertItemVariant(ctx context.Context, arg InsertItemVariantParams) (InventoryItemVariant, error) {
	row := q.db.QueryRowContext(ctx, insertItemVariant,
		arg.ID,
		arg.ItemID,
		arg.ImageUrl,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.IsDefault,
	)
	var i InventoryItemVariant
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.ImageUrl,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUnit = `-- name: InsertUnit :one
INSERT INTO inventory.units(id, company_id, name)
VALUES ($1, $2, $3)
RETURNING id, company_id, name, created_at, updated_at
`

type InsertUnitParams struct {
	ID        string `db:"id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

func (q *Queries) InsertUnit(ctx context.Context, arg InsertUnitParams) (InventoryUnit, error) {
	row := q.db.QueryRowContext(ctx, insertUnit, arg.ID, arg.CompanyID, arg.Name)
	var i InventoryUnit
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBrand = `-- name: UpdateBrand :one
UPDATE inventory.brands
SET 
    name = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, company_id, name, created_at, updated_at
`

type UpdateBrandParams struct {
	ID   string `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (InventoryBrand, error) {
	row := q.db.QueryRowContext(ctx, updateBrand, arg.ID, arg.Name)
	var i InventoryBrand
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE inventory.groups
SET 
    name = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, company_id, name, created_at, updated_at
`

type UpdateGroupParams struct {
	ID   string `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (InventoryGroup, error) {
	row := q.db.QueryRowContext(ctx, updateGroup, arg.ID, arg.Name)
	var i InventoryGroup
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUnit = `-- name: UpdateUnit :one
UPDATE inventory.units
SET 
    name = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, company_id, name, created_at, updated_at
`

type UpdateUnitParams struct {
	ID   string `db:"id"`
	Name string `db:"name"`
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) (InventoryUnit, error) {
	row := q.db.QueryRowContext(ctx, updateUnit, arg.ID, arg.Name)
	var i InventoryUnit
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
