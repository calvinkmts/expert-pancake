// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const getCompanyChartOfAccounts = `-- name: GetCompanyChartOfAccounts :many
SELECT id, company_id, branch_id, account_code, account_name, account_group, bank_name, 
bank_account_number, bank_code, opening_balance, is_deleted
FROM accounting.company_chart_of_accounts
WHERE company_id = $1 AND account_name LIKE $2
`

type GetCompanyChartOfAccountsParams struct {
	CompanyID   string `db:"company_id"`
	AccountName string `db:"account_name"`
}

type GetCompanyChartOfAccountsRow struct {
	ID                string  `db:"id"`
	CompanyID         string  `db:"company_id"`
	BranchID          string  `db:"branch_id"`
	AccountCode       string  `db:"account_code"`
	AccountName       string  `db:"account_name"`
	AccountGroup      string  `db:"account_group"`
	BankName          string  `db:"bank_name"`
	BankAccountNumber string  `db:"bank_account_number"`
	BankCode          string  `db:"bank_code"`
	OpeningBalance    float64 `db:"opening_balance"`
	IsDeleted         int32   `db:"is_deleted"`
}

func (q *Queries) GetCompanyChartOfAccounts(ctx context.Context, arg GetCompanyChartOfAccountsParams) ([]GetCompanyChartOfAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyChartOfAccounts, arg.CompanyID, arg.AccountName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompanyChartOfAccountsRow
	for rows.Next() {
		var i GetCompanyChartOfAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.BranchID,
			&i.AccountCode,
			&i.AccountName,
			&i.AccountGroup,
			&i.BankName,
			&i.BankAccountNumber,
			&i.BankCode,
			&i.OpeningBalance,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
