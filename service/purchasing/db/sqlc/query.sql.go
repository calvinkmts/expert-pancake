// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const deletePurchasing = `-- name: DeletePurchasing :exec
UPDATE purchasing.purchasings
SET is_deleted = true
WHERE id = $1
`

func (q *Queries) DeletePurchasing(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePurchasing, id)
	return err
}

const deletePurchasingRack = `-- name: DeletePurchasingRack :exec
UPDATE purchasing.purchasing_racks
SET is_deleted = true
WHERE id = $1
`

func (q *Queries) DeletePurchasingRack(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePurchasingRack, id)
	return err
}

const getPurchasingRacks = `-- name: GetPurchasingRacks :many
SELECT id, purchasing_id, name
FROM purchasing.purchasing_racks
WHERE CASE WHEN $4::bool THEN id = $1
ELSE purchasing_id = $2 AND name LIKE $3 AND is_deleted = false END
`

type GetPurchasingRacksParams struct {
	ID          string `db:"id"`
	PurchasingID string `db:"purchasing_id"`
	Name        string `db:"name"`
	IsFilterID  bool   `db:"is_filter_id"`
}

type GetPurchasingRacksRow struct {
	ID          string `db:"id"`
	PurchasingID string `db:"purchasing_id"`
	Name        string `db:"name"`
}

func (q *Queries) GetPurchasingRacks(ctx context.Context, arg GetPurchasingRacksParams) ([]GetPurchasingRacksRow, error) {
	rows, err := q.db.QueryContext(ctx, getPurchasingRacks,
		arg.ID,
		arg.PurchasingID,
		arg.Name,
		arg.IsFilterID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPurchasingRacksRow
	for rows.Next() {
		var i GetPurchasingRacksRow
		if err := rows.Scan(&i.ID, &i.PurchasingID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPurchasings = `-- name: GetPurchasings :many
SELECT id, branch_id, code, name, address, type
FROM purchasing.purchasings
WHERE CASE WHEN $4::bool THEN id = $1
ELSE branch_id = $2 AND name LIKE $3
AND is_deleted = false END
`

type GetPurchasingsParams struct {
	ID         string `db:"id"`
	BranchID   string `db:"branch_id"`
	Name       string `db:"name"`
	IsFilterID bool   `db:"is_filter_id"`
}

type GetPurchasingsRow struct {
	ID       string `db:"id"`
	BranchID string `db:"branch_id"`
	Code     string `db:"code"`
	Name     string `db:"name"`
	Address  string `db:"address"`
	Type     string `db:"type"`
}

func (q *Queries) GetPurchasings(ctx context.Context, arg GetPurchasingsParams) ([]GetPurchasingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPurchasings,
		arg.ID,
		arg.BranchID,
		arg.Name,
		arg.IsFilterID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPurchasingsRow
	for rows.Next() {
		var i GetPurchasingsRow
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.Code,
			&i.Name,
			&i.Address,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertPurchasing = `-- name: UpsertPurchasing :one
INSERT INTO purchasing.purchasings(id, branch_id, code, name, address, type)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id)
DO UPDATE SET
    branch_id = EXCLUDED.branch_id,
    name = EXCLUDED.name,
    address = EXCLUDED.address,
    type = EXCLUDED.type,
    updated_at = NOW()
RETURNING id, branch_id, code, name, address, type, is_deleted, created_at, updated_at
`

type UpsertPurchasingParams struct {
	ID       string `db:"id"`
	BranchID string `db:"branch_id"`
	Code     string `db:"code"`
	Name     string `db:"name"`
	Address  string `db:"address"`
	Type     string `db:"type"`
}

func (q *Queries) UpsertPurchasing(ctx context.Context, arg UpsertPurchasingParams) (PurchasingPurchasing, error) {
	row := q.db.QueryRowContext(ctx, upsertPurchasing,
		arg.ID,
		arg.BranchID,
		arg.Code,
		arg.Name,
		arg.Address,
		arg.Type,
	)
	var i PurchasingPurchasing
	err := row.Scan(
		&i.ID,
		&i.BranchID,
		&i.Code,
		&i.Name,
		&i.Address,
		&i.Type,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertPurchasingRack = `-- name: UpsertPurchasingRack :one
INSERT INTO purchasing.purchasing_racks(id, purchasing_id, name)
VALUES ($1, $2, $3)
ON CONFLICT (id)
DO UPDATE SET
    purchasing_id = EXCLUDED.purchasing_id,
    name = EXCLUDED.name,
    updated_at = NOW()
RETURNING id, purchasing_id, name, created_at, updated_at, is_deleted
`

type UpsertPurchasingRackParams struct {
	ID          string `db:"id"`
	PurchasingID string `db:"purchasing_id"`
	Name        string `db:"name"`
}

func (q *Queries) UpsertPurchasingRack(ctx context.Context, arg UpsertPurchasingRackParams) (PurchasingPurchasingRack, error) {
	row := q.db.QueryRowContext(ctx, upsertPurchasingRack, arg.ID, arg.PurchasingID, arg.Name)
	var i PurchasingPurchasingRack
	err := row.Scan(
		&i.ID,
		&i.PurchasingID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
