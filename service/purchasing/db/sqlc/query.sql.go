// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package db

import (
	"context"
	"time"
)

const upsertPurchaseOrder = `-- name: UpsertPurchaseOrder :one
INSERT INTO purchasing.purchase_orders(
        id, sales_order_id, company_id, branch_id, form_number, transaction_date,
        contact_book_id, secondary_company_id, konekin_id, currency_code
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT (id) DO
UPDATE
SET sales_order_id = EXCLUDED.sales_order_id,
    company_id = EXCLUDED.company_id,
    branch_id = EXCLUDED.branch_id,
    form_number = EXCLUDED.form_number,
    transaction_date = EXCLUDED.transaction_date,
    contact_book_id = EXCLUDED.contact_book_id,
    secondary_company_id = EXCLUDED.secondary_company_id,
    konekin_id = EXCLUDED.konekin_id,
    currency_code = EXCLUDED.currency_code,
    updated_at = NOW()
RETURNING id, sales_order_id, company_id, branch_id, form_number, transaction_date, contact_book_id, secondary_company_id, konekin_id, currency_code, total_items, total, is_deleted, status, created_at, updated_at
`

type UpsertPurchaseOrderParams struct {
	ID                 string    `db:"id"`
	SalesOrderID       string    `db:"sales_order_id"`
	CompanyID          string    `db:"company_id"`
	BranchID           string    `db:"branch_id"`
	FormNumber         string    `db:"form_number"`
	TransactionDate    time.Time `db:"transaction_date"`
	ContactBookID      string    `db:"contact_book_id"`
	SecondaryCompanyID string    `db:"secondary_company_id"`
	KonekinID          string    `db:"konekin_id"`
	CurrencyCode       string    `db:"currency_code"`
}

func (q *Queries) UpsertPurchaseOrder(ctx context.Context, arg UpsertPurchaseOrderParams) (PurchasingPurchaseOrder, error) {
	row := q.db.QueryRowContext(ctx, upsertPurchaseOrder,
		arg.ID,
		arg.SalesOrderID,
		arg.CompanyID,
		arg.BranchID,
		arg.FormNumber,
		arg.TransactionDate,
		arg.ContactBookID,
		arg.SecondaryCompanyID,
		arg.KonekinID,
		arg.CurrencyCode,
	)
	var i PurchasingPurchaseOrder
	err := row.Scan(
		&i.ID,
		&i.SalesOrderID,
		&i.CompanyID,
		&i.BranchID,
		&i.FormNumber,
		&i.TransactionDate,
		&i.ContactBookID,
		&i.SecondaryCompanyID,
		&i.KonekinID,
		&i.CurrencyCode,
		&i.TotalItems,
		&i.Total,
		&i.IsDeleted,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
