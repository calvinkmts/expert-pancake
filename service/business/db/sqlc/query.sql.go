// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const getUserCompanies = `-- name: GetUserCompanies :many
SELECT id, user_id, name, initial_name, type, responsible_person FROM business.companies
WHERE user_id = $1 AND is_deleted = 0
`

type GetUserCompaniesRow struct {
	ID                string `db:"id"`
	UserID            string `db:"user_id"`
	Name              string `db:"name"`
	InitialName       string `db:"initial_name"`
	Type              string `db:"type"`
	ResponsiblePerson string `db:"responsible_person"`
}

func (q *Queries) GetUserCompanies(ctx context.Context, userID string) ([]GetUserCompaniesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserCompanies, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCompaniesRow
	for rows.Next() {
		var i GetUserCompaniesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.InitialName,
			&i.Type,
			&i.ResponsiblePerson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserCompaniesFilteredByName = `-- name: GetUserCompaniesFilteredByName :many
SELECT id, user_id, name, initial_name, type, responsible_person FROM business.companies
WHERE user_id = $1 AND is_deleted = 0 AND name LIKE $2
`

type GetUserCompaniesFilteredByNameParams struct {
	UserID string `db:"user_id"`
	Name   string `db:"name"`
}

type GetUserCompaniesFilteredByNameRow struct {
	ID                string `db:"id"`
	UserID            string `db:"user_id"`
	Name              string `db:"name"`
	InitialName       string `db:"initial_name"`
	Type              string `db:"type"`
	ResponsiblePerson string `db:"responsible_person"`
}

func (q *Queries) GetUserCompaniesFilteredByName(ctx context.Context, arg GetUserCompaniesFilteredByNameParams) ([]GetUserCompaniesFilteredByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserCompaniesFilteredByName, arg.UserID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCompaniesFilteredByNameRow
	for rows.Next() {
		var i GetUserCompaniesFilteredByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.InitialName,
			&i.Type,
			&i.ResponsiblePerson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserCompanyBranches = `-- name: GetUserCompanyBranches :many
SELECT id, user_id, company_id, name, address, phone_number FROM business.company_branches
WHERE user_id = $1 AND company_id = $2 AND is_deleted = 0
`

type GetUserCompanyBranchesParams struct {
	UserID    string `db:"user_id"`
	CompanyID string `db:"company_id"`
}

type GetUserCompanyBranchesRow struct {
	ID          string `db:"id"`
	UserID      string `db:"user_id"`
	CompanyID   string `db:"company_id"`
	Name        string `db:"name"`
	Address     string `db:"address"`
	PhoneNumber string `db:"phone_number"`
}

func (q *Queries) GetUserCompanyBranches(ctx context.Context, arg GetUserCompanyBranchesParams) ([]GetUserCompanyBranchesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserCompanyBranches, arg.UserID, arg.CompanyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCompanyBranchesRow
	for rows.Next() {
		var i GetUserCompanyBranchesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.Name,
			&i.Address,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserCompanyBranchesFilteredByName = `-- name: GetUserCompanyBranchesFilteredByName :many
SELECT id, user_id, company_id, name, address, phone_number FROM business.company_branches
WHERE user_id = $1 AND company_id = $2 AND is_deleted = 0 AND name LIKE $3
`

type GetUserCompanyBranchesFilteredByNameParams struct {
	UserID    string `db:"user_id"`
	CompanyID string `db:"company_id"`
	Name      string `db:"name"`
}

type GetUserCompanyBranchesFilteredByNameRow struct {
	ID          string `db:"id"`
	UserID      string `db:"user_id"`
	CompanyID   string `db:"company_id"`
	Name        string `db:"name"`
	Address     string `db:"address"`
	PhoneNumber string `db:"phone_number"`
}

func (q *Queries) GetUserCompanyBranchesFilteredByName(ctx context.Context, arg GetUserCompanyBranchesFilteredByNameParams) ([]GetUserCompanyBranchesFilteredByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserCompanyBranchesFilteredByName, arg.UserID, arg.CompanyID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCompanyBranchesFilteredByNameRow
	for rows.Next() {
		var i GetUserCompanyBranchesFilteredByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.Name,
			&i.Address,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCompany = `-- name: UpsertCompany :one
INSERT INTO business.companies(id, user_id, name, initial_name, type, responsible_person, is_deleted)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (id)
DO UPDATE SET
    name = EXCLUDED.name,
    initial_name = EXCLUDED.initial_name,
    type = EXCLUDED.type,
    responsible_person = EXCLUDED.responsible_person, 
    is_deleted = EXCLUDED.is_deleted, 
    updated_at = NOW()
RETURNING id, user_id, name, initial_name, type, responsible_person, is_deleted, created_at, updated_at
`

type UpsertCompanyParams struct {
	ID                string `db:"id"`
	UserID            string `db:"user_id"`
	Name              string `db:"name"`
	InitialName       string `db:"initial_name"`
	Type              string `db:"type"`
	ResponsiblePerson string `db:"responsible_person"`
	IsDeleted         int32  `db:"is_deleted"`
}

func (q *Queries) UpsertCompany(ctx context.Context, arg UpsertCompanyParams) (BusinessCompany, error) {
	row := q.db.QueryRowContext(ctx, upsertCompany,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.InitialName,
		arg.Type,
		arg.ResponsiblePerson,
		arg.IsDeleted,
	)
	var i BusinessCompany
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.InitialName,
		&i.Type,
		&i.ResponsiblePerson,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertCompanyBranch = `-- name: UpsertCompanyBranch :one
INSERT INTO business.company_branches(id, user_id, company_id, name, address, phone_number, is_deleted)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (id)
DO UPDATE SET
    name = EXCLUDED.name,
    address = EXCLUDED.address,
    phone_number = EXCLUDED.phone_number,
    is_deleted = EXCLUDED.is_deleted, 
    updated_at = NOW()
RETURNING id, user_id, company_id, name, address, phone_number, is_deleted, created_at, updated_at
`

type UpsertCompanyBranchParams struct {
	ID          string `db:"id"`
	UserID      string `db:"user_id"`
	CompanyID   string `db:"company_id"`
	Name        string `db:"name"`
	Address     string `db:"address"`
	PhoneNumber string `db:"phone_number"`
	IsDeleted   int32  `db:"is_deleted"`
}

func (q *Queries) UpsertCompanyBranch(ctx context.Context, arg UpsertCompanyBranchParams) (BusinessCompanyBranch, error) {
	row := q.db.QueryRowContext(ctx, upsertCompanyBranch,
		arg.ID,
		arg.UserID,
		arg.CompanyID,
		arg.Name,
		arg.Address,
		arg.PhoneNumber,
		arg.IsDeleted,
	)
	var i BusinessCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.Name,
		&i.Address,
		&i.PhoneNumber,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
